function main(config, profileName) {

    // Ê∑ªÂä†UPCDNS
    updateDNS(config, [
        ["proxy-server-nameserver", "121.251.251.251"],
        ["default-nameserver", "121.251.251.251"],
        ["nameserver", "121.251.251.251"]
    ]);
   
    // ÁßªÈô§systemËßÑÂàô
    updateDNS(config, [
        ["proxy-server-nameserver", "system"],
        ["default-nameserver", "system"],
        ["nameserver", "system"]
    ], true);

    // // Ê∑ªÂä†DH-DNS‰∏äÊµ∑
    // updateDNS(config, [
    //     ["proxy-server-nameserver", "https://dh-dns.global-idt.net/dns-query#RULES&h3=true&skip-cert-verify=true"],
    //     ["fallback", "https://dh-dns.global-idt.net/dns-query#RULES&h3=true&skip-cert-verify=true"]
    // ]);
    // // Ê∑ªÂä†DH-DNSÂåó‰∫¨
    // updateDNS(config, [
    //     ["proxy-server-nameserver", "https://north.dh-global-team.net:438/dns-query#RULES&h3=true&skip-cert-verify=true"],
    //     ["fallback", "https://north.dh-global-team.net:438/dns-query#RULES&h3=true&skip-cert-verify=true"]
    // ]);
    
   //ÁßªÈô§nameserver-policy
    modifyConfigByPath(config, 'dns', null, null, 'nameserver-policy', null)
    removeNullValues(config)

    // ‰øÆÊîπËêΩÂú∞ËäÇÁÇπ IP ÁâàÊú¨
    // updateProxyOptionByGroup(config, "name", /.*/, "ip-version", "ipv4-prefer");

    // ÈÖçÁΩÆStashÂçïËäÇÁÇπÊµãÈÄüÂú∞ÂùÄ
    updateProxyOption(config, "name", /Â≠¶ÊúØ\|/, "benchmark-url", "http://121.251.251.207");
    updateProxyOption(config, "name", /Â≠¶ÊúØ\|/, "benchmark-timeout", "5");
    updateProxyOption(config, "name", /ÂõûÂÆ∂\|/, "benchmark-url", "http://192.168.67.180:5244");
    updateProxyOption(config, "name", /ÂõûÂÆ∂\|/, "benchmark-timeout", "5");

    // Á¶ÅÊ≠¢‰∏éÊàñÈùûÊìç‰Ωú
    delRules(config,/AND\,/)
    delRules(config,/OR\,/)
    delRules(config,/NOT\,/)

    // ‰ΩøÁî®aes128SS
    updateProxyOption(config, "name", /Ëá™Âª∫L/, "port", 8936)
    updateProxyOption(config, "name", /Ëá™Âª∫L/, "cipher", "aes-128-gcm")
    // Âà†Èô§2022-blake3-aes-128-gcmËäÇÁÇπ
    removeProxiesByProperty(config, "cipher", "2022-blake3-aes-128-gcm");
    // Âà†Èô§vlessËäÇÁÇπ
    removeProxiesByProperty(config, "type", "vless");

    // ÂÖ≥Èó≠Ëá™Âª∫ËêΩÂú∞TCPÂø´ÈÄüÊâìÂºÄ
    updateProxyOption(config, "name", /Ëá™Âª∫L/, "tfo", false);

    // ËÆæÁΩÆdialer-proxy
    // updateDialerProxyGroup(config, [
    //     ["üõ¨ Êñ∞Âä†Âù°ËêΩÂú∞", "üá∏üá¨ Êñ∞Âä†Âù°ËäÇÁÇπ", "ü¶Å Êñ∞Âä†Âù°Ëá™Âª∫ËêΩÂú∞"],
    //     ["üõ¨ ÁæéÂõΩËêΩÂú∞", "üá∫üá≤ ÁæéÂõΩËäÇÁÇπ", "üíµ ÁæéÂõΩËá™Âª∫ËêΩÂú∞"],
    //     ["üõ¨ Êó•Êú¨ËêΩÂú∞", "üáØüáµ Êó•Êú¨ËäÇÁÇπ", "üéé Êó•Êú¨Ëá™Âª∫ËêΩÂú∞"],
    //     ["üõ¨ È¶ôÊ∏ØËêΩÂú∞", "üá≠üá∞ È¶ôÊ∏ØËäÇÁÇπ", "üå∑ È¶ôÊ∏ØËá™Âª∫ËêΩÂú∞"],
    //     ["üõ¨ ÊπæÊπæËêΩÂú∞", "üêâ ÊπæÊπæËäÇÁÇπ", "üçç ÊπæÊπæËá™Âª∫ËêΩÂú∞"],
    //     ["üõ¨ Ë•øÂåóÊ¨ßËêΩÂú∞", "üá™üá∫ Ë•øÂåóÊ¨ßËäÇÁÇπ", "üóº Ë•øÂåóÊ¨ßËá™Âª∫ËêΩÂú∞"],
    //     ["üõ¨ Ëã±ÂõΩËêΩÂú∞", "üá¨üáß Ëã±ÂõΩËäÇÁÇπ", "üíÇ Ëã±ÂõΩËá™Âª∫ËêΩÂú∞"]
    // ]);
    // updateDialerProxyGroup(config, [
    //     ["üõ¨ Êñ∞Âä†Âù°ËêΩÂú∞", "üá∏üá¨ Êñ∞Âä†Âù°ËäÇÁÇπ", "ü¶Å Êñ∞Âä†Âù°Ëá™Âª∫ËêΩÂú∞"],
    //     ["üõ¨ ÁæéÂõΩËêΩÂú∞", "üá∫üá≤ ÁæéÂõΩËäÇÁÇπ", "üíµ ÁæéÂõΩËá™Âª∫ËêΩÂú∞"],
    //     ["üõ¨ Êó•Êú¨ËêΩÂú∞", "üáØüáµ Êó•Êú¨ËäÇÁÇπ", "üéé Êó•Êú¨Ëá™Âª∫ËêΩÂú∞"],
    //     ["üõ¨ È¶ôÊ∏ØËêΩÂú∞", "üá≠üá∞ È¶ôÊ∏ØËäÇÁÇπ", "üå∑ È¶ôÊ∏ØËá™Âª∫ËêΩÂú∞"],
    //     ["üõ¨ ÊπæÊπæËêΩÂú∞", "üå∑ È¶ôÊ∏ØËá™Âª∫ËêΩÂú∞", "üçç ÊπæÊπæËá™Âª∫ËêΩÂú∞"],
    //     ["üõ¨ Ë•øÂåóÊ¨ßËêΩÂú∞", "üá™üá∫ Ë•øÂåóÊ¨ßËäÇÁÇπ", "üóº Ë•øÂåóÊ¨ßËá™Âª∫ËêΩÂú∞"],
    //     ["üõ¨ Ëã±ÂõΩËêΩÂú∞", "üóº Ë•øÂåóÊ¨ßËá™Âª∫ËêΩÂú∞", "üíÇ Ëã±ÂõΩËá™Âª∫ËêΩÂú∞"]
    // ]);
    // removeGroupsByRegex(config, /‰ªªÈÄâÂâçÁΩÆ/);
    // removeProxiesByRegex(config, /‰ªªÈÄâÂâçÁΩÆ/);
    // removeGroupsByRegex(config, /‰ªªÈÄâËêΩÂú∞/);
    // removeProxiesByRegex(config, /‰ªªÈÄâËêΩÂú∞/);
    // updateGroupOption(config, "type", ["load-balance"], "strategy", "round-robin");
    
    // ‰øÆÊîπËäÇÁÇπdialer-proxy (Ê≠£ÂàôÂåπÈÖç)
    updateProxyOption(config, "name", /JPÁ©øÈÄèSS-/, "dialer-proxy", "üáØüáµ Êó•Êú¨ËäÇÁÇπ");
    updateProxyOption(config, "name", /HKÁ©øÈÄèSS-/, "dialer-proxy", "üá≠üá∞ È¶ôÊ∏ØËäÇÁÇπ");
    updateProxyOption(config, "name", /USÁ©øÈÄèSS-/, "dialer-proxy", "üá∫üá≤ ÁæéÂõΩËäÇÁÇπ");
    updateProxyOption(config, "name", /SGÁ©øÈÄèSS-/, "dialer-proxy", "üá∏üá¨ Êñ∞Âä†Âù°ËäÇÁÇπ");
    updateProxyOption(config, "name", /TWÁ©øÈÄèSS-/, "dialer-proxy", "üêâ ÊπæÊπæËäÇÁÇπ");

    // ‰øÆÊîπËÆ¢ÈòÖÁªÑÈÄâÈ°π
    updateGroupOption(config, "type", ["load-balance", "fallback", "url-test"], "lazy", false);

    // ‰øÆÊîπËäÇÁÇπskip-cert-verifyÈÄâÈ°π
    updateProxyOption(config, "type", ["vmess", "vless", "trojan", "ss", "hysteria2", "tuic"], "skip-cert-verify", true);

    // // ‰øÆÊîπËäÇÁÇπ UDP over TCP ÈÄâÈ°π
    // updateProxyOption(config, "type", ["vmess", "vless", "trojan", "ss", "ssr", "tuic"], "udp-over-tcp", true);

    // Ê∑ªÂä†ËäÇÁÇπÂà∞Ê≠£ÂàôÁªÑ
    addProxiesToRegexGroup(config, /ÂõûÂÆ∂‰∏ìÁî®Âª∂Ëøü‰ºòÂÖà/, "DIRECT");
    addProxiesToRegexGroup(config, /CQGAS/, "DIRECT");
    addProxiesToRegexGroup(config, /ÊµÅÂ™í‰ΩìÊâãÈÄâ/, "DIRECT");
    addProxiesToRegexGroup(config, /Âº∫Âà∂Á¶ÅÊ≠¢/, "PASS", true);

    // Ê∑ªÂä†Êñ∞ËäÇÁÇπ
    const DIRECTv4Pre = { "name": "DIRECT-V4PRE", "type": "direct", "udp": true, "ip-version": "ipv4-prefer" };
    addProxyAndGroup(config, DIRECTv4Pre, "after", "DIRECT");

    // Ê∑ªÂä†ËßÑÂàô
    addRules(config,"DOMAIN-SUFFIX,ai-assistant.upc.edu.cn,üìö Â≠¶ÊúØÁõ¥Ëøû", "unshift")
    addRules(config,"DOMAIN-SUFFIX,webvpn.upc.edu.cn,üöÑ Êú¨Âú∞Áõ¥Ëøû", "unshift")
    addRules(config,"DOMAIN-SUFFIX,sslvpn.upc.edu.cn,üöÑ Êú¨Âú∞Áõ¥Ëøû", "unshift")
    addRules(config,"DOMAIN-SUFFIX,www.upc.edu.cn,üöÑ Êú¨Âú∞Áõ¥Ëøû", "unshift")

    // Âà†Èô§vlessËäÇÁÇπ
    removeProxiesByProperty(config, "type", "vless");


    // ÂàÜÁªÑÊéíÂ∫è
    // sortRulesWithinGroups(config)

    // ÁßªÈô§LSÊ†áËÆ∞
    proxiesRename(config, "select", /\[LS\]/, "")

    return config;
}

// Â¢ûÂä†/Âà†Èô§ DNS
// ‰º†ÂÖ•ÂèÇÊï∞Ôºöconfig, dnsMappings("["proxy-server-nameserver", "121.251.251.251"]"), del(boolean, ÊòØÂê¶Âà†Èô§), createKey(boolean, ÊòØÂê¶Ëá™Âä®ÂàõÂª∫ dnsKey)
function updateDNS(config, dnsMappings, del = false, createKey = false) {
    if (config.dns) {
        dnsMappings.forEach(([dnsKey, dnsValue]) => {
            if (config.dns[dnsKey]) {
                if (del) {
                    // Âà†Èô§Êìç‰Ωú
                    config.dns[dnsKey] = config.dns[dnsKey].filter(
                        (item) => item !== dnsValue
                    );
                } else {
                    // Ê∑ªÂä†Êìç‰Ωú
                    const hasDNS = config.dns[dnsKey].includes(dnsValue);
                    if (!hasDNS) {
                        config.dns[dnsKey].unshift(dnsValue);
                    }
                }
            } else if (createKey) {
                config.dns[dnsKey] = del ? [] : [dnsValue];
            }
        });
    }
}

// ‰øÆÊîπËäÇÁÇπÁªÑÂÜÖËäÇÁÇπdialer-proxy‰ª£ÁêÜÂπ∂Â∞ÜrelayËäÇÁÇπÁªÑÊõøÊç¢‰∏∫Êñ∞ÁöÑËäÇÁÇπÁªÑ
// ‰º†ÂÖ•ÂèÇÊï∞Ôºöconfig, groupMappings([groupName, dialerProxyName, targetGroupName])
// ‰æãÂ¶ÇÂéüÈÄªËæë‰∏∫ÔºöËá™Âª∫ËêΩÂú∞ÔºàgroupNameÔºâËäÇÁÇπÁªÑ‰∏∫ÔºöËá™Âª∫ËäÇÁÇπ1„ÄÅËá™Âª∫ËäÇÁÇπ2ÔºårelayËäÇÁÇπÁªÑÔºàtargetGroupNameÔºâ‰∏∫ÔºöÂâçÁΩÆËäÇÁÇπÔºàdialerProxyNameÔºâ„ÄÅËá™Âª∫ËêΩÂú∞ÔºåÈÄöËøáËÑöÊú¨ÂèØ‰ª•Â∞ÜËá™Âª∫ËäÇÁÇπ1„ÄÅËá™Âª∫ËäÇÁÇπ2Ê∑ªÂä†ÂâçÁΩÆËäÇÁÇπ‰Ωú‰∏∫dialer-proxy‰ª£ÁêÜÔºåÂπ∂‰øÆÊîπrelayËäÇÁÇπÁªÑ‰∏∫select‰∏îÂè™‰øùÁïôËá™Âª∫ËêΩÂú∞ËäÇÁÇπÁªÑ
// Ëã•groupName‰∏≠‰∏∫Á©∫ÊàñDIRECTÔºåÈÇ£‰πàÂàôtargetGroupNameÊ∑ªÂä†dialerProxyNameÂπ∂ËÆæÁΩÆ‰∏∫select
function updateDialerProxyGroup(config, groupMappings) {
    groupMappings.forEach(([groupName, dialerProxyName, targetGroupName]) => {
        const group = config["proxy-groups"].find(group => group.name === groupName);
        const targetGroupIndex = config["proxy-groups"].findIndex(group => group.name === targetGroupName);
        if (targetGroupIndex === -1) {
            return;
        }
        // Ê£ÄÊü• group.proxies ÊòØÂê¶‰∏∫Á©∫Êàñ‰ªÖÂåÖÂê´ "DIRECT"
        const hasOnlyDirect = group.proxies.length === 0 || group.proxies.every(proxyName => proxyName === "DIRECT");
        if (hasOnlyDirect) {
            config["proxy-groups"][targetGroupIndex] = {
                name: targetGroupName,
                type: "select",
                proxies: [dialerProxyName],
            };
        } else {
            group.proxies.forEach(proxyName => {
                if (proxyName !== "DIRECT") {
                    const proxy = config.proxies.find(p => p.name === proxyName);
                    if (proxy) {
                        proxy["dialer-proxy"] = dialerProxyName;
                    }
                }
            });
            config["proxy-groups"][targetGroupIndex] = {
                name: targetGroupName,
                type: "select",
                proxies: [groupName],
            };
        }
    });
}

// ‰øÆÊîπËäÇÁÇπÁªÑÂ±ûÊÄß
// ‰º†ÂÖ•ÂèÇÊï∞Ôºöconfig, searchBy, targetGroups, optionName, optionValue
function updateGroupOption(config, searchBy, targetGroups, optionName, optionValue) {
    config["proxy-groups"].forEach(group => {
        if (Array.isArray(targetGroups)) {
            for (const targetGroup of targetGroups) {
                if (targetGroup instanceof RegExp && targetGroup.test(group[searchBy])) {
                    group[optionName] = optionValue;
                    break;
                } else if (group[searchBy] === targetGroup) {
                    group[optionName] = optionValue;
                    break;
                }
            }
        } else if (targetGroups instanceof RegExp && targetGroups.test(group[searchBy])) {
            group[optionName] = optionValue;
        } else if (group[searchBy] === targetGroups) {
            group[optionName] = optionValue;
        }
    });
}

// ‰øÆÊîπËäÇÁÇπÂ±ûÊÄß
// ‰º†ÂÖ•ÂèÇÊï∞Ôºöconfig, searchBy, targetProxies, optionName, optionValue
function updateProxyOption(config, searchBy, targetProxies, optionName, optionValue) {
    config.proxies.forEach(proxy => {
        if (Array.isArray(targetProxies)) {
            for (const targetProxy of targetProxies) {
                if (targetProxy instanceof RegExp && targetProxy.test(proxy[searchBy])) {
                    proxy[optionName] = optionValue;
                    break;
                } else if (proxy[searchBy] === targetProxy) {
                    proxy[optionName] = optionValue;
                    break;
                }
            }
        } else if (targetProxies instanceof RegExp && targetProxies.test(proxy[searchBy])) {
            proxy[optionName] = optionValue;
        } else if (proxy[searchBy] === targetProxies) {
            proxy[optionName] = optionValue;
        }
    });
}


// ‰øÆÊîπËäÇÁÇπÁªÑÂÜÖËäÇÁÇπÂ±ûÊÄß
// ‰º†ÂÖ•ÂèÇÊï∞Ôºöconfig, searchBy, targetGroups, optionName, optionValue
function updateProxyOptionByGroup(config, searchBy, targetGroups, optionName, optionValue) {
    config["proxy-groups"].forEach(group => {
        if (Array.isArray(targetGroups)) {
            for (const targetGroup of targetGroups) {
                if (targetGroup instanceof RegExp && targetGroup.test(group[searchBy])) {
                    group.proxies.forEach(proxyName => {
                        const proxy = (config.proxies || []).find(p => p.name === proxyName);
                        if (proxy) {
                            proxy[optionName] = optionValue;
                        }
                    });
                    break;
                } else if (group[searchBy] === targetGroup) {
                    group.proxies.forEach(proxyName => {
                        const proxy = (config.proxies || []).find(p => p.name === proxyName);
                        if (proxy) {
                            proxy[optionName] = optionValue;
                        }
                    });
                    break;
                }
            }
        } else if (targetGroups instanceof RegExp && targetGroups.test(group[searchBy])) {
            group.proxies.forEach(proxyName => {
                const proxy = (config.proxies || []).find(p => p.name === proxyName);
                if (proxy) {
                    proxy[optionName] = optionValue;
                }
            });
        } else if (group[searchBy] === targetGroups) {
            group.proxies.forEach(proxyName => {
                const proxy = (config.proxies || []).find(p => p.name === proxyName);
                if (proxy) {
                    proxy[optionName] = optionValue;
                }
            });
        }
    });
}


// ÊåáÂÆöËäÇÁÇπÂà∞Ê≠£ÂàôÂåπÈÖçËäÇÁÇπÁªÑ
// ‰º†ÂÖ•ÂèÇÊï∞Ôºöconfig, regex, newProxies, del(boolean, ÊòØÂê¶Âà†Èô§)
function addProxiesToRegexGroup(config, regex, newProxies, del = false) {
    const targetGroups = config["proxy-groups"].filter(group => regex.test(group.name));
    targetGroups.forEach(targetGroup => {
        if (!Array.isArray(newProxies)) {
            newProxies = [newProxies];
        }
        newProxies.forEach(proxy => {
            if (del) {
                const index = targetGroup.proxies.indexOf(proxy);
                if (index > -1) {
                    targetGroup.proxies.splice(index, 1);
                }
            } else {
                if (!targetGroup.proxies.includes(proxy)) {
                    targetGroup.proxies.push(proxy);
                }
            }
        });
    });
}

// Ê∑ªÂä†ËßÑÂàô
// ‰º†ÂÖ•ÂèÇÊï∞Ôºöconfig, newrule, position(push/unshiftÔºåÈªòËÆ§‰∏∫unshiftÔºåÂç≥ÊúÄÈ´ò‰ºòÂÖàÁ∫ß)
function addRules(config, newrule, position) {
    if (position === "push") {
        config["rules"].splice(-1, 0, newrule);
    } else {
        config["rules"].unshift(newrule);
    }
}

// Âà†Èô§ËßÑÂàô
// ‰º†ÂÖ•ÂèÇÊï∞Ôºöconfig, ruleToDelete (Ë¶ÅÂà†Èô§ÁöÑËßÑÂàôÔºåÂèØ‰ª•ÊòØÂ≠óÁ¨¶‰∏≤ÊàñÊ≠£ÂàôË°®ËææÂºè)
function delRules(config, ruleToDelete) {
    if (!config || !config.rules || !Array.isArray(config.rules)) {
      return;
    }
    const isRegExp = ruleToDelete instanceof RegExp;
    config.rules = config.rules.filter(rule => {
      if (isRegExp) {
        return !ruleToDelete.test(rule);
      } else {
        return rule !== ruleToDelete;
      }
    });
  }

// Âà†Èô§ÊåáÂÆöÂ±ûÊÄßËäÇÁÇπ
// ‰º†ÂÖ•ÂèÇÊï∞Ôºöconfig, property(Â±ûÊÄß), value(ÂÄº)
function removeProxiesByProperty(config, property, value) {
    const removedProxyNames = [];
    config.proxies = config.proxies.filter(proxy => {
        if (proxy[property] === value) {
            removedProxyNames.push(proxy.name);
            return false;
        }
        return true;
    });
    config["proxy-groups"].forEach(group => {
        group.proxies = group.proxies.filter(proxyName => !removedProxyNames.includes(proxyName));
    });
}

// ÂØπËßÑÂàôËøõË°åÊéíÂ∫è
// ‰º†ÂÖ•ÂèÇÊï∞Ôºöconfig
function sortRulesWithinGroups(config) {
    const ruleTypeOrder = {
        'PROCESS': 0,
        'DOMAIN': 1,
        'IP': 2
    };

    function getRuleTypeCategory(rule) {
        const ruleType = rule.split(',')[0];
        if (ruleType.startsWith('PROCESS')) return 'PROCESS';
        if (ruleType.startsWith('DOMAIN') || ruleType === 'GEOSITE') return 'DOMAIN';
        if (ruleType.startsWith('IP') || ruleType === 'GEOIP') return 'IP';
        return 'OTHER';
    }

    function compareRules(a, b) {
        const categoryA = getRuleTypeCategory(a);
        const categoryB = getRuleTypeCategory(b);
        const orderA = ruleTypeOrder[categoryA] !== undefined ? ruleTypeOrder[categoryA] : 3;
        const orderB = ruleTypeOrder[categoryB] !== undefined ? ruleTypeOrder[categoryB] : 3;
        return orderA - orderB;
    }

    function getRuleGroup(rule) {
        const parts = rule.split(',');
        const lastPart = parts[parts.length - 1];
        const secondLastPart = parts[parts.length - 2];

        if (lastPart === 'no-resolve' || lastPart === 'DIRECT') {
            return secondLastPart;
        }
        return lastPart;
    }

    let sortedRules = [];
    let currentGroup = [];
    let currentGroupTarget = null;

    for (let i = 0; i < config.rules.length; i++) {
        const rule = config.rules[i];
        const ruleTarget = getRuleGroup(rule);

        if (ruleTarget === currentGroupTarget) {
            currentGroup.push(rule);
        } else {
            if (currentGroup.length > 0) {
                currentGroup.sort(compareRules);
                sortedRules = sortedRules.concat(currentGroup);
            }
            currentGroup = [rule];
            currentGroupTarget = ruleTarget;
        }
    }

    if (currentGroup.length > 0) {
        currentGroup.sort(compareRules);
        sortedRules = sortedRules.concat(currentGroup);
    }

    config.rules = sortedRules;
    return config;
}

// Âêë proxies Ê∑ªÂä†ËäÇÁÇπÂπ∂ÈÖçÁΩÆÂ±ûÊÄßÔºåÁÑ∂ÂêéÊ∑ªÂä†Âà∞ÊåáÂÆöÁöÑËäÇÁÇπÁªÑ
// ‰º†ÂÖ•ÂèÇÊï∞Ôºöconfig, newProxy, insertMode(beforeÊèíÂÖ•ÁâπÂÆöËäÇÁÇπ‰πãÂâç/afterÊèíÂÖ•ÁâπÂÆöËäÇÁÇπ‰πãÂêé/regexÊèíÂÖ•Ê≠£ÂàôÁªÑ), reference
function addProxyAndGroup(config, newProxy, insertMode, reference) {
    // 1. Ê∑ªÂä†ËäÇÁÇπÂà∞ config.proxies
    if (!config.proxies) {
        config.proxies = [];
    }
    if (!config["proxy-groups"]) {
        config["proxy-groups"] = [];
    }
    config.proxies.push(newProxy);

    // 2. Â∞ÜËäÇÁÇπÊ∑ªÂä†Âà∞ÊåáÂÆöÁöÑËäÇÁÇπÁªÑ
    if (insertMode === "before" || insertMode === "after") {
        let targetGroups = [];
        for (let i = 0; i < config["proxy-groups"].length; i++) {
            const group = config["proxy-groups"][i];
            if (group.proxies.includes(reference)) {
                targetGroups.push(group);
            }
        }

        targetGroups.forEach(targetGroup => {
            const referenceIndex = targetGroup.proxies.indexOf(reference);
            if (insertMode === "before") {
                targetGroup.proxies.splice(referenceIndex, 0, newProxy.name);
            } else {
                targetGroup.proxies.splice(referenceIndex + 1, 0, newProxy.name);
            }
        });

        if (targetGroups.length === 0) {
            console.error(`Reference proxy "${reference}" not found in any group.`);
        }
    } else if (insertMode === "regex") {
        if (!(reference instanceof RegExp)) {
            console.error("Reference must be a regular expression for 'regex' mode.");
            return;
        }

        const targetGroups = config["proxy-groups"].filter(group => reference.test(group.name));
        targetGroups.forEach(targetGroup => {
            if (!targetGroup.proxies.includes(newProxy.name)) {
                targetGroup.proxies.push(newProxy.name);
            }
        });
    } else {
        console.error("Invalid insertMode. Use 'before', 'after', or 'regex'.");
    }
}
// addProxyAndGroup‰ΩøÁî®ÊñπÊ≥ï
// // ÂÅáËÆæÁöÑÈÖçÁΩÆÂØπË±°
// let config = {
//     "proxies": [
//         { "name": "ËäÇÁÇπA", "type": "ss", "server": "serverA", "port": 443, "cipher": "aes-256-gcm", "password": "passwordA" },
//         { "name": "ËäÇÁÇπB", "type": "vmess", "server": "serverB", "port": 443, "uuid": "uuidB", "alterId": 64, "cipher": "auto" }
//     ],
//     "proxy-groups": [
//         { "name": "Group1", "type": "select", "proxies": ["ËäÇÁÇπA", "ËäÇÁÇπB"] },
//         { "name": "Group2", "type": "url-test", "proxies": ["ËäÇÁÇπB"] },
//         { "name": "È¶ôÊ∏Ø", "type": "url-test", "proxies": ["ËäÇÁÇπA"] }
//     ],
//     "rules": []
// };

// // Á§∫‰æã1ÔºöÊ∑ªÂä†‰∏Ä‰∏™Êñ∞ËäÇÁÇπÔºåÂπ∂Â∞ÜÂÖ∂ÊîæÁΩÆÂú®ÂåÖÂê´ "ËäÇÁÇπA" ÁöÑÁªÑÁöÑÂâçÈù¢
// const newProxy1 = { "name": "Êñ∞ËäÇÁÇπ1", "type": "trojan", "server": "server1", "port": 443, "password": "password1" };
// addProxyAndGroup(config, newProxy1, "before", "ËäÇÁÇπA");

// // Á§∫‰æã2ÔºöÊ∑ªÂä†‰∏Ä‰∏™Êñ∞ËäÇÁÇπÔºåÂπ∂Â∞ÜÂÖ∂ÊîæÁΩÆÂú®ÂåÖÂê´ "ËäÇÁÇπB" ÁöÑÁªÑÁöÑÂêéÈù¢
// const newProxy2 = { "name": "Êñ∞ËäÇÁÇπ2", "type": "ss", "server": "server2", "port": 443, "cipher": "chacha20-ietf-poly1305", "password": "password2" };
// addProxyAndGroup(config, newProxy2, "after", "ËäÇÁÇπB");

// // Á§∫‰æã3ÔºöÊ∑ªÂä†‰∏Ä‰∏™Êñ∞ËäÇÁÇπÔºåÂπ∂Â∞ÜÂÖ∂ÊîæÁΩÆÂú®ÂêçÁß∞ÂåπÈÖç /È¶ôÊ∏Ø/ ÁöÑÁªÑ‰∏≠
// const newProxy3 = { "name": "Êñ∞ËäÇÁÇπ3", "type": "vmess", "server": "server3", "port": 443, "uuid": "uuid3", "alterId": 32, "cipher": "auto" };
// addProxyAndGroup(config, newProxy3, "regex", /È¶ôÊ∏Ø/);

// console.log(JSON.stringify(config, null, 2));

// Ê≠£ÂàôÊâπÈáèÂà†Èô§ËäÇÁÇπÁªÑ
// ‰º†ÂÖ•ÂèÇÊï∞Ôºöconfig, regex
function removeGroupsByRegex(config, regex) {
    const removedGroupNames = [];
    config["proxy-groups"] = config["proxy-groups"].filter(group => {
        if (regex.test(group.name)) {
            removedGroupNames.push(group.name);
            return false;
        }
        return true;
    });
    config["proxy-groups"].forEach(group => {
        group.proxies = group.proxies.filter(proxyName => !removedGroupNames.includes(proxyName));
    });
}

// Ê≠£ÂàôÊâπÈáèÂà†Èô§ËäÇÁÇπ
// ‰º†ÂÖ•ÂèÇÊï∞Ôºöconfig, regex
function removeProxiesByRegex(config, regex) {
    const removedProxyNames = [];
    config.proxies = config.proxies.filter(proxy => {
        if (regex.test(proxy.name)) {
            removedProxyNames.push(proxy.name);
            return false;
        }
        return true;
    });
    config["proxy-groups"].forEach(group => {
        group.proxies = group.proxies.filter(proxyName => !removedProxyNames.includes(proxyName));
    });
}

/**
 * ÈáçÂëΩÂêç‰ª£ÁêÜËäÇÁÇπ„ÄÇ
 *
 * @param {object} config - ‰ª£ÁêÜÈÖçÁΩÆÂØπË±°„ÄÇ
 * @param {string} type - ÈáçÂëΩÂêçÁ±ªÂûãÔºåÂèØÈÄâÂÄº‰∏∫ 'all' Êàñ 'select'„ÄÇ
 *                       - 'all': Â∞ÜÂåπÈÖçÊ≠£ÂàôË°®ËææÂºèÁöÑËäÇÁÇπÂêçÁß∞ÂÆåÂÖ®ÊõøÊç¢‰∏∫ newname„ÄÇ
 *                       - 'select': ‰ªÖÂ∞ÜËäÇÁÇπÂêçÁß∞‰∏≠ÂåπÈÖçÊ≠£ÂàôË°®ËææÂºèÁöÑÈÉ®ÂàÜÊõøÊç¢‰∏∫ newname„ÄÇ
 * @param {RegExp} regex - Áî®‰∫éÂåπÈÖçËäÇÁÇπÂêçÁß∞ÁöÑÊ≠£ÂàôË°®ËææÂºè„ÄÇ
 * @param {string} newname - Êñ∞ÁöÑËäÇÁÇπÂêçÁß∞Â≠óÁ¨¶‰∏≤„ÄÇ
 * @returns {object} - ‰øÆÊîπÂêéÁöÑ‰ª£ÁêÜÈÖçÁΩÆÂØπË±°„ÄÇ
 */
function proxiesRename(config, type, regex, newname) {
    config.proxies.forEach(proxy => {
        if (regex.test(proxy.name)) {
            const oldName = proxy.name;
            if (type === 'all') {
                proxy.name = newname;
            } else if (type === 'select') {
                proxy.name = proxy.name.replace(regex, newname);
            }

            config["proxy-groups"].forEach(group => {
                const index = group.proxies.indexOf(oldName);
                if (index > -1) {
                    group.proxies[index] = proxy.name;
                }
            });
        }
    });
    return config;
}

/**
 * Ê†πÊçÆÂ±ÇÁ∫ßË∑ØÂæÑ„ÄÅÊü•ÊâæÊù°‰ª∂Âíå‰øÆÊîπÈîÆÂÄºÂØπ‰øÆÊîπÈÖçÁΩÆÂØπË±°‰∏≠ÁöÑÂ±ûÊÄß„ÄÇ
 *
 * @param {object} config - Ë¶Å‰øÆÊîπÁöÑÈÖçÁΩÆÂØπË±°„ÄÇ
 * @param {string} path - Ë¶Å‰øÆÊîπÁöÑÂ±ûÊÄßÁöÑÂ±ÇÁ∫ßË∑ØÂæÑÔºå‰æãÂ¶Ç "proxy-groups.name" Êàñ "tun.enable"„ÄÇÁ©∫Â≠óÁ¨¶‰∏≤ "" Ë°®Á§∫‰øÆÊîπÂÖ®Â±ÄÈÖçÁΩÆ„ÄÇ
 * @param {string} [searchKey] - Áî®‰∫éÊü•ÊâæÁöÑÂ±ûÊÄßÂêçÔºàÂèØÈÄâÔºâ„ÄÇÂ¶ÇÊûú‰∏∫Á©∫ÔºåÂàôË°®Á§∫‰øÆÊîπÂÖ®Â±ÄÈÖçÁΩÆ„ÄÇ
 * @param {*} [searchValue] - Áî®‰∫éÊü•ÊâæÁöÑÂ±ûÊÄßÂÄºÔºàÂèØÈÄâÔºâ„ÄÇ
 * @param {string} modifyKey - Ë¶Å‰øÆÊîπÁöÑÂ±ûÊÄßÂêç„ÄÇ
 * @param {*} modifyValue - Ë¶ÅËÆæÁΩÆÁöÑÂ±ûÊÄßÂÄº„ÄÇ
 * @returns {object} - ‰øÆÊîπÂêéÁöÑÈÖçÁΩÆÂØπË±°„ÄÇ
 *
 * @example
 * // ÂÅáËÆæÁöÑÈÖçÁΩÆÂØπË±°
 * let config = {
 *     "proxy-groups": [
 *         { "name": "Group1", "type": "select" },
 *         { "name": "Group2", "type": "url-test" }
 *     ],
 *     "tun": {
 *         "enable": false
 *     },
 *     "port": 7890
 * };
 *
 * // 1. Ê†πÊçÆ name ‰øÆÊîπËäÇÁÇπÁªÑÂ±ûÊÄß proxy-groups.name Êü•Êâæ type ËøõË°å‰øÆÊîπ
 * config = modifyConfigByPath(config, "proxy-groups", "name", "Group1", "type", "fallback");
 *
 * // 2. Ê†πÊçÆÁ±ªÂûã‰øÆÊîπËäÇÁÇπÁªÑ proxies proxy-groups.type Êü•Êâæ proxies ËøõË°å‰øÆÊîπ
 * config = modifyConfigByPath(config, "proxy-groups", "type", "url-test", "proxies", ["ËäÇÁÇπC"]);
 *
 * // 3. ÂèØ‰ª•‰øÆÊîπÂÖ®Â±ÄÈÖçÁΩÆÊØîÂ¶ÇÊü•Êâæ port ËøõË°å‰øÆÊîπ
 * config = modifyConfigByPath(config, "", null, null, "port", 7891);
 *
 * // 4. ÊàñËÄÖ tun Êü•Êâæ enable ËøõË°å‰øÆÊîπ
 * config = modifyConfigByPath(config, "tun", "enable", false, "enable", true);
 *
 * // 5. Â¶ÇÊûú‰∏çÂ≠òÂú®ÁöÑÂ±ûÊÄßÂàôËøõË°åÂàõÂª∫ (Âú® proxy-groups ‰∏≠‰∏∫ Group1 Ê∑ªÂä†Êñ∞Â±ûÊÄß custom)
 * config = modifyConfigByPath(config, "proxy-groups", "name", "Group1", "custom", "value");
 *
 * // 6. Â¶ÇÊûú‰∏çÂ≠òÂú®ÁöÑÂÖ®Â±ÄÂ±ûÊÄßÂàôËøõË°åÂàõÂª∫
 * config = modifyConfigByPath(config, "", null, null, "newGlobalOption", "new value");
 */
function modifyConfigByPath(config, path, searchKey, searchValue, modifyKey, modifyValue) {
    if (path === "") {
        config[modifyKey] = modifyValue;
        return config;
    }

    const pathSegments = path.split('.');
    let current = config;
    let parent = null;
    let currentKey = null;

    for (const segment of pathSegments) {
        parent = current;
        currentKey = segment;
        if (current && current.hasOwnProperty(segment)) {
            current = current[segment];
        } else {
            // Â¶ÇÊûúË∑ØÂæÑ‰∏çÂ≠òÂú®ÔºåÂàôÂàõÂª∫
            if (parent) {
                parent[segment] = {};
                current = parent[segment];
            } else {
                console.error(`Ë∑ØÂæÑ ${path} ‰∏çÂ≠òÂú®‰∏îÊó†Ê≥ïÂàõÂª∫„ÄÇ`);
                return config;
            }
        }
    }

    if (Array.isArray(current)) {
        // Â§ÑÁêÜÊï∞ÁªÑÁ±ªÂûãÁöÑÁõÆÊ†áÔºå‰æãÂ¶Ç proxy-groups
        current.forEach(item => {
            if (item && item.hasOwnProperty(searchKey) && item[searchKey] === searchValue) {
                if (modifyKey) {
                    item[modifyKey] = modifyValue;
                } else {
                    // Â¶ÇÊûúÊ≤°Êúâ modifyKeyÔºåÂàôÁõ¥Êé•‰øÆÊîπÂΩìÂâçÈ°π
                    console.warn("Êú™ÊåáÂÆö modifyKeyÔºåÊó†Ê≥ï‰øÆÊîπÊï∞ÁªÑÂÖÉÁ¥†„ÄÇ");
                }
            }
        });
    } else if (typeof current === 'object' && current !== null) {
        if (searchKey && current.hasOwnProperty(searchKey)) {
            if (current[searchKey] === searchValue) {
                current[modifyKey] = modifyValue;
            }
        } else if (!searchKey && modifyKey) {
            // ‰øÆÊîπÂÖ®Â±ÄÈÖçÁΩÆ
            current[modifyKey] = modifyValue;
        } else if (!searchKey && !modifyKey) {
            console.warn("Êú™ÊåáÂÆö searchKey Êàñ modifyKeyÔºåÊó†Ê≥ï‰øÆÊîπÂØπË±°„ÄÇ");
        }
    } else if (parent && currentKey && modifyKey) {
        // Â§ÑÁêÜÈúÄË¶ÅÂàõÂª∫Â±ûÊÄßÁöÑÊÉÖÂÜµ
        parent[currentKey] = parent[currentKey] || {};
        parent[currentKey][modifyKey] = modifyValue;
    } else {
        console.warn(`Êó†Ê≥ï‰øÆÊîπË∑ØÂæÑ ${path}ÔºåËØ∑Ê£ÄÊü•Ë∑ØÂæÑÂíåÂèÇÊï∞„ÄÇ`);
    }

    return config;
}

// ÁßªÈô§ÊâÄÊúâ‰∏∫NullÁöÑÂØπË±°
function removeNullValues(config) {
    for (const key in config) {
        if (config[key] === null) {
            delete config[key];
        } else if (typeof config[key] === 'object') {
            removeNullValues(config[key]);
        }
    }
}
